{"ast":null,"code":"// format date to YYYY-MM-DD\nexport const formatDate = dateStr => {\n  const date = new Date(dateStr);\n  return date.toISOString().split('T')[0];\n};\n\n// convert time to 00:00:00, takes in startTime, endTime as timeObj\nexport const convertTimeTo24HourFormat = timeObj => {\n  let {\n    hour,\n    period\n  } = timeObj;\n  hour = parseInt(hour);\n  if (period === 'PM' && hour !== 12) {\n    hour += 12;\n  } else if (period === 'AM' && hour === 12) {\n    hour = 0;\n  }\n  return `${hour.toString().padStart(2, '0')}:00:00`;\n};\nexport const deleteTimeZoneFromForecastTime = dateTime => {\n  const lastIndex = dateTime.lastIndexOf('-');\n  const date = dateTime.substring(0, lastIndex);\n  // Extract the substring before the last dash (\"-\")\n  return date;\n};\nexport const formatDateTime = dateString => {\n  const date = new Date(dateString);\n  const newDate = new Intl.DateTimeFormat('en-US', {\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric',\n    weekday: 'short',\n    hour: 'numeric',\n    minute: 'numeric',\n    hour12: true\n  }).format(date);\n  return newDate;\n};","map":{"version":3,"names":["formatDate","dateStr","date","Date","toISOString","split","convertTimeTo24HourFormat","timeObj","hour","period","parseInt","toString","padStart","deleteTimeZoneFromForecastTime","dateTime","lastIndex","lastIndexOf","substring","formatDateTime","dateString","newDate","Intl","DateTimeFormat","year","month","day","weekday","minute","hour12","format"],"sources":["/Users/belle/Desktop/data-society/data-society-take-home/src/utils.js"],"sourcesContent":["// format date to YYYY-MM-DD\nexport const formatDate = (dateStr) => {\n    const date = new Date(dateStr);\n    return date.toISOString().split('T')[0];\n};\n\n// convert time to 00:00:00, takes in startTime, endTime as timeObj\nexport const convertTimeTo24HourFormat = (timeObj) => {\n    let { hour, period } = timeObj;\n    hour = parseInt(hour);\n  \n    if (period === 'PM' && hour !== 12) {\n      hour += 12;\n    } else if (period === 'AM' && hour === 12) {\n      hour = 0;\n    }\n\n    return `${hour.toString().padStart(2, '0')}:00:00`;\n};\n\nexport const deleteTimeZoneFromForecastTime = (dateTime) => {\n    const lastIndex = dateTime.lastIndexOf('-');\n    const date = dateTime.substring(0, lastIndex);\n    // Extract the substring before the last dash (\"-\")\n    return date\n}\n\nexport const formatDateTime = (dateString) => {\n  const date = new Date(dateString);\n   const newDate =  new Intl.DateTimeFormat('en-US', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n      weekday: 'short',\n      hour: 'numeric',\n      minute: 'numeric',\n      hour12: true\n    }).format(date);\n\n    return newDate\n}"],"mappings":"AAAA;AACA,OAAO,MAAMA,UAAU,GAAIC,OAAO,IAAK;EACnC,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAACF,OAAO,CAAC;EAC9B,OAAOC,IAAI,CAACE,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AAC3C,CAAC;;AAED;AACA,OAAO,MAAMC,yBAAyB,GAAIC,OAAO,IAAK;EAClD,IAAI;IAAEC,IAAI;IAAEC;EAAO,CAAC,GAAGF,OAAO;EAC9BC,IAAI,GAAGE,QAAQ,CAACF,IAAI,CAAC;EAErB,IAAIC,MAAM,KAAK,IAAI,IAAID,IAAI,KAAK,EAAE,EAAE;IAClCA,IAAI,IAAI,EAAE;EACZ,CAAC,MAAM,IAAIC,MAAM,KAAK,IAAI,IAAID,IAAI,KAAK,EAAE,EAAE;IACzCA,IAAI,GAAG,CAAC;EACV;EAEA,OAAQ,GAAEA,IAAI,CAACG,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAE,QAAO;AACtD,CAAC;AAED,OAAO,MAAMC,8BAA8B,GAAIC,QAAQ,IAAK;EACxD,MAAMC,SAAS,GAAGD,QAAQ,CAACE,WAAW,CAAC,GAAG,CAAC;EAC3C,MAAMd,IAAI,GAAGY,QAAQ,CAACG,SAAS,CAAC,CAAC,EAAEF,SAAS,CAAC;EAC7C;EACA,OAAOb,IAAI;AACf,CAAC;AAED,OAAO,MAAMgB,cAAc,GAAIC,UAAU,IAAK;EAC5C,MAAMjB,IAAI,GAAG,IAAIC,IAAI,CAACgB,UAAU,CAAC;EAChC,MAAMC,OAAO,GAAI,IAAIC,IAAI,CAACC,cAAc,CAAC,OAAO,EAAE;IAC/CC,IAAI,EAAE,SAAS;IACfC,KAAK,EAAE,MAAM;IACbC,GAAG,EAAE,SAAS;IACdC,OAAO,EAAE,OAAO;IAChBlB,IAAI,EAAE,SAAS;IACfmB,MAAM,EAAE,SAAS;IACjBC,MAAM,EAAE;EACV,CAAC,CAAC,CAACC,MAAM,CAAC3B,IAAI,CAAC;EAEf,OAAOkB,OAAO;AAClB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}