{"ast":null,"code":"var _jsxFileName = \"/Users/belle/Desktop/data-society/data-society-take-home/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [latitude, setLatitude] = useState('');\n  const [longitude, setLongitude] = useState('');\n  const [startDate, setStartDate] = useState('');\n  const [endDate, setEndDate] = useState('');\n  const [startTime, setStartTime] = useState({\n    hour: '',\n    period: ''\n  });\n  const [endTime, setEndTime] = useState({\n    hour: '',\n    period: ''\n  });\n  const [weatherData, setWeatherData] = useState(null);\n  const [filteredData, setFilteredData] = useState(null);\n  const [error, setError] = useState('');\n\n  // format date to YYYY-MM-DD\n  const formatDate = dateStr => {\n    const date = new Date(dateStr);\n    return date.toISOString().split('T')[0];\n  };\n\n  // const formatDate = (dateStr) => {\n  //   const date = new Date(dateStr);\n  //   const options = { year: 'numeric', month: '2-digit', day: '2-digit' };\n  //   return date.toLocaleDateString('en-CA', options).replace(/\\//g, '-');\n  // };\n\n  // convert time to 00:00:00\n  const convertTimeTo24HourFormat = timeObj => {\n    let {\n      hour,\n      period\n    } = timeObj;\n    hour = parseInt(hour);\n    if (period === 'PM' && hour !== 12) {\n      hour += 12;\n    } else if (period === 'AM' && hour === 12) {\n      hour = 0;\n    }\n\n    // return `${hour.toString().padStart(2, '0')}:00:00-05:00`;\n    return `${hour.toString().padStart(2, '0')}:00:00`;\n  };\n  const calculateTimeZoneOffset = () => {\n    const offset = new Date().getTimezoneOffset();\n    const absOffset = Math.abs(offset);\n    const hours = String(Math.floor(absOffset / 60)).padStart(2, '0');\n    const minutes = String(absOffset % 60).padStart(2, '0');\n    const sign = offset <= 0 ? '+' : '-';\n    return `${sign}${hours}:${minutes}`;\n  };\n\n  // Function to generate dates for the next seven days\n  const daysOfWeek = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n  const nextSevenDays = Array.from({\n    length: 7\n  }, (_, index) => {\n    const today = new Date();\n    const date = new Date(today);\n    date.setDate(date.getDate() + index);\n    const dayOfWeek = daysOfWeek[date.getDay()];\n    const month = date.toLocaleString('en-US', {\n      month: 'short'\n    });\n    const day = date.getDate();\n    const year = date.getFullYear();\n    return `${dayOfWeek} ${month} ${day}, ${year}`;\n  });\n\n  // Arrays for hours and AM/PM\n  const hours = Array.from({\n    length: 12\n  }, (_, i) => i + 1);\n  const periods = ['AM', 'PM'];\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const lat = parseFloat(latitude);\n    const long = parseFloat(longitude);\n    if (!latitude || !longitude) {\n      setError('Please enter latitude and longitude');\n      return;\n    }\n    setError('');\n    const url = `https://api.weather.gov/points/${lat},${long}`;\n    try {\n      // 1ST API CALL TO GET HOURLY FORECAST ENDPOINT\n      const response = await fetch(url);\n      console.log(\"response\", response);\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(`Error ${errorData.status}: ${errorData.detail}` || `Error: ${response.status}`);\n      }\n      const data = await response.json();\n      const forecastHourlyURL = data.properties.forecastHourly;\n\n      // 2ND API CALL TO GET HOURLY FORECAST\n      const forecastResponse = await fetch(forecastHourlyURL);\n      console.log(\"forecast\", forecastResponse);\n      if (!forecastResponse.ok) {\n        const errorData = await forecastResponse.json();\n        throw new Error(`Error ${errorData.status}: ${errorData.detail}` || `Error: ${forecastResponse.status}`);\n      }\n      const forecastData = await forecastResponse.json();\n      setWeatherData(forecastData);\n\n      // convert user input dates and times to match API data's startTime, endTime values\n      const startDateTime = `${formatDate(startDate)}T${convertTimeTo24HourFormat(startTime)}`;\n      const endDateTime = `${formatDate(endDate)}T${convertTimeTo24HourFormat(endTime)}`;\n      // const startDateTime = new Date(`${formatDate(startDate)}T${convertTimeTo24HourFormat(startTime)}Z`);\n      // const endDateTime = new Date(`${formatDate(endDate)}T${convertTimeTo24HourFormat(endTime)}Z`);\n      // const startDateTime = new Date(`${formatDate(startDate)}T${convertTimeTo24HourFormat(startTime)}Z`).toISOString();\n      // const endDateTime = new Date(`${formatDate(endDate)}T${convertTimeTo24HourFormat(endTime)}Z`).toISOString();\n\n      console.log(\"datetime\", endDateTime);\n      console.log(\"format\", formatDate(startDate));\n\n      // filter data based on start date/time and end date/time\n      const filteredPeriods = forecastData.properties.periods.filter(period => {\n        const periodStartTime = deleteTimeZoneFromForecastTime(period.startTime);\n        console.log(\"perioddd\", periodStartTime);\n        // console.log(new Date(period.startTime).getTime())\n        // const periodStartTime = new Date(period.startTime).getTime();\n        // const periodEndTime = new Date(period.endTime).getTime();\n        // return (periodStartTime >= startDateTime && periodEndTime <= endDateTime.getTime());\n        // console.log(\"iso\", new Date(periodStartTime).toISOString())\n        return periodStartTime >= startDateTime && periodStartTime <= endDateTime;\n      });\n\n      //  const filteredPeriods = forecastData.properties.periods.filter(period => {\n      //   const periodStartTime = new Date(period.startTime).toISOString();\n      //   const periodEndTime = new Date(period.endTime).toISOString();\n      //   console.log(\"period\", periodEndTime)\n      //   return (periodStartTime >= startDateTime && periodEndTime <= endDateTime);\n      // });\n\n      console.log(\"filters\", filteredPeriods);\n      setFilteredData(filteredPeriods);\n    } catch (error) {\n      console.log(error);\n      setError(error.message);\n      setWeatherData(null);\n    }\n  };\n  const deleteTimeZoneFromForecastTime = dateTime => {\n    const lastIndex = dateTime.lastIndexOf('-');\n    const date = dateTime.substring(0, lastIndex);\n    // Extract the substring before the last dash (\"-\")\n    return date;\n  };\n  const formatDateTime = dateString => {\n    const date = new Date(dateString);\n    const newDate = new Intl.DateTimeFormat('en-US', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n      weekday: 'short',\n      hour: 'numeric',\n      minute: 'numeric',\n      hour12: true\n    }).format(date);\n    return newDate;\n  };\n  console.log(filteredData);\n  console.log(\"orig\", startTime);\n  console.log(convertTimeTo24HourFormat(endTime));\n  console.log(startTime);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"How's the weather? \\uD83C\\uDF21\\uFE0F\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Enter location coordinates\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Latitude:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: latitude,\n            onChange: e => setLatitude(e.target.value),\n            placeholder: \"e.g., 36.1716\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Longitude:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: longitude,\n            onChange: e => setLongitude(e.target.value),\n            placeholder: \"e.g., -115.1391\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"startDate\",\n        children: \"Start Date:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"startDate\",\n        value: startDate,\n        onChange: e => setStartDate(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          disabled: true,\n          children: \"Select day\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 7\n        }, this), nextSevenDays.map((date, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: date,\n          children: date\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 11\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"endDate\",\n        children: \"End Date:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"endDate\",\n        value: endDate,\n        onChange: e => setEndDate(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          disabled: true,\n          children: \"Select day\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 7\n        }, this), nextSevenDays.map((date, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: date,\n          children: date\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 11\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"startTimeHour\",\n        children: \"Start Time:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"startTimeHour\",\n        value: startTime.hour,\n        onChange: e => setStartTime({\n          ...startTime,\n          hour: e.target.value\n        }),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          disabled: true,\n          children: \"Select hour\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 9\n        }, this), hours.map((hour, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: hour,\n          children: hour\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 11\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"startTimePeriod\",\n        value: startTime.period,\n        onChange: e => setStartTime({\n          ...startTime,\n          period: e.target.value\n        }),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          disabled: true,\n          children: \"Select period\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 9\n        }, this), periods.map((period, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: period,\n          children: period\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 11\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"endTimeHour\",\n        children: \"End Time:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"endTimeHour\",\n        value: endTime.hour,\n        onChange: e => setEndTime({\n          ...endTime,\n          hour: e.target.value\n        }),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          disabled: true,\n          children: \"Select hour\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 9\n        }, this), hours.map((hour, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: hour,\n          children: hour\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 11\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"endTimePeriod\",\n        value: endTime.period,\n        onChange: e => setEndTime({\n          ...endTime,\n          period: e.target.value\n        }),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          disabled: true,\n          children: \"Select period\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 9\n        }, this), periods.map((period, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: period,\n          children: period\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 11\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 17\n    }, this), weatherData && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Weather Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 11\n      }, this), filteredData.map((period, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"weather-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: formatDateTime(deleteTimeZoneFromForecastTime(period.startTime))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Temperature: \", period.temperature, \" \\xB0\", period.temperatureUnit]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: period.shortForecast\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Precipitation: \", period.probabilityOfPrecipitation.value, \"%\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 15\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 13\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 180,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"o8fd18GkNoMsf9VLf0jhLb8bXqc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","App","_s","latitude","setLatitude","longitude","setLongitude","startDate","setStartDate","endDate","setEndDate","startTime","setStartTime","hour","period","endTime","setEndTime","weatherData","setWeatherData","filteredData","setFilteredData","error","setError","formatDate","dateStr","date","Date","toISOString","split","convertTimeTo24HourFormat","timeObj","parseInt","toString","padStart","calculateTimeZoneOffset","offset","getTimezoneOffset","absOffset","Math","abs","hours","String","floor","minutes","sign","daysOfWeek","nextSevenDays","Array","from","length","_","index","today","setDate","getDate","dayOfWeek","getDay","month","toLocaleString","day","year","getFullYear","i","periods","handleSubmit","e","preventDefault","lat","parseFloat","long","url","response","fetch","console","log","ok","errorData","json","Error","status","detail","data","forecastHourlyURL","properties","forecastHourly","forecastResponse","forecastData","startDateTime","endDateTime","filteredPeriods","filter","periodStartTime","deleteTimeZoneFromForecastTime","message","dateTime","lastIndex","lastIndexOf","substring","formatDateTime","dateString","newDate","Intl","DateTimeFormat","weekday","minute","hour12","format","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","value","onChange","target","placeholder","htmlFor","id","disabled","map","style","color","temperature","temperatureUnit","shortForecast","probabilityOfPrecipitation","_c","$RefreshReg$"],"sources":["/Users/belle/Desktop/data-society/data-society-take-home/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [latitude, setLatitude] = useState('');\n  const [longitude, setLongitude] = useState('');\n  const [startDate, setStartDate] = useState('');\n  const [endDate, setEndDate] = useState('');\n  const [startTime, setStartTime] = useState({ hour: '', period: '' });\n  const [endTime, setEndTime] = useState({ hour: '', period: '' });\n  const [weatherData, setWeatherData] = useState(null);\n  const [filteredData, setFilteredData] = useState(null);\n  const [error, setError] = useState('');\n\n  // format date to YYYY-MM-DD\n  const formatDate = (dateStr) => {\n    const date = new Date(dateStr);\n    return date.toISOString().split('T')[0];\n  };\n\n  // const formatDate = (dateStr) => {\n  //   const date = new Date(dateStr);\n  //   const options = { year: 'numeric', month: '2-digit', day: '2-digit' };\n  //   return date.toLocaleDateString('en-CA', options).replace(/\\//g, '-');\n  // };\n\n  // convert time to 00:00:00\n  const convertTimeTo24HourFormat = (timeObj) => {\n    let { hour, period } = timeObj;\n    hour = parseInt(hour);\n  \n    if (period === 'PM' && hour !== 12) {\n      hour += 12;\n    } else if (period === 'AM' && hour === 12) {\n      hour = 0;\n    }\n  \n    // return `${hour.toString().padStart(2, '0')}:00:00-05:00`;\n    return `${hour.toString().padStart(2, '0')}:00:00`;\n  };\n\n  const calculateTimeZoneOffset = () => {\n    const offset = new Date().getTimezoneOffset();\n    const absOffset = Math.abs(offset);\n    const hours = String(Math.floor(absOffset / 60)).padStart(2, '0');\n    const minutes = String(absOffset % 60).padStart(2, '0');\n    const sign = offset <= 0 ? '+' : '-';\n    return `${sign}${hours}:${minutes}`;\n  };\n  \n\n   // Function to generate dates for the next seven days\n   const daysOfWeek = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n   const nextSevenDays = Array.from({ length: 7 }, (_, index) => {\n    const today = new Date();\n     const date = new Date(today);\n     date.setDate(date.getDate() + index);\n     const dayOfWeek = daysOfWeek[date.getDay()];\n     const month = date.toLocaleString('en-US', { month: 'short' });\n     const day = date.getDate();\n     const year = date.getFullYear();\n     return `${dayOfWeek} ${month} ${day}, ${year}`;\n   });\n\n     // Arrays for hours and AM/PM\n    const hours = Array.from({ length: 12 }, (_, i) => i + 1);\n    const periods = ['AM', 'PM'];\n\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    const lat = parseFloat(latitude);\n    const long = parseFloat(longitude);\n\n    if (!latitude || !longitude) {\n      setError('Please enter latitude and longitude');\n      return;\n    }\n\n    setError('');\n\n    const url = `https://api.weather.gov/points/${lat},${long}`;\n\n    try {\n      // 1ST API CALL TO GET HOURLY FORECAST ENDPOINT\n      const response = await fetch(url);\n      console.log(\"response\", response)\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(`Error ${errorData.status}: ${errorData.detail}` || `Error: ${response.status}`);\n      }\n      const data = await response.json();\n      const forecastHourlyURL = data.properties.forecastHourly;\n\n      // 2ND API CALL TO GET HOURLY FORECAST\n      const forecastResponse = await fetch(forecastHourlyURL)\n      console.log(\"forecast\", forecastResponse)\n      if (!forecastResponse.ok) {\n        const errorData = await forecastResponse.json();\n        throw new Error(`Error ${errorData.status}: ${errorData.detail}` || `Error: ${forecastResponse.status}`);\n      }\n\n      const forecastData = await forecastResponse.json();\n      setWeatherData(forecastData);\n\n     // convert user input dates and times to match API data's startTime, endTime values\n     const startDateTime = `${formatDate(startDate)}T${convertTimeTo24HourFormat(startTime)}`;\n     const endDateTime = `${formatDate(endDate)}T${convertTimeTo24HourFormat(endTime)}`;\n    // const startDateTime = new Date(`${formatDate(startDate)}T${convertTimeTo24HourFormat(startTime)}Z`);\n    // const endDateTime = new Date(`${formatDate(endDate)}T${convertTimeTo24HourFormat(endTime)}Z`);\n    // const startDateTime = new Date(`${formatDate(startDate)}T${convertTimeTo24HourFormat(startTime)}Z`).toISOString();\n    // const endDateTime = new Date(`${formatDate(endDate)}T${convertTimeTo24HourFormat(endTime)}Z`).toISOString();\n\n     console.log(\"datetime\", endDateTime)\n     console.log(\"format\", formatDate(startDate))\n\n     // filter data based on start date/time and end date/time\n     const filteredPeriods = forecastData.properties.periods.filter(period => {\n        const periodStartTime = deleteTimeZoneFromForecastTime(period.startTime);\n        console.log(\"perioddd\",periodStartTime)\n        // console.log(new Date(period.startTime).getTime())\n        // const periodStartTime = new Date(period.startTime).getTime();\n        // const periodEndTime = new Date(period.endTime).getTime();\n        // return (periodStartTime >= startDateTime && periodEndTime <= endDateTime.getTime());\n        // console.log(\"iso\", new Date(periodStartTime).toISOString())\n        return (periodStartTime >= startDateTime && periodStartTime <= endDateTime);\n     });\n\n    //  const filteredPeriods = forecastData.properties.periods.filter(period => {\n    //   const periodStartTime = new Date(period.startTime).toISOString();\n    //   const periodEndTime = new Date(period.endTime).toISOString();\n    //   console.log(\"period\", periodEndTime)\n    //   return (periodStartTime >= startDateTime && periodEndTime <= endDateTime);\n    // });\n\n    console.log(\"filters\", filteredPeriods)\n      \n     setFilteredData(filteredPeriods);\n      \n    } catch (error) {\n      console.log(error)\n      setError(error.message);\n      setWeatherData(null);\n    }\n  };\n\n  const deleteTimeZoneFromForecastTime = (dateTime) => {\n    const lastIndex = dateTime.lastIndexOf('-');\n\n    const date = dateTime.substring(0, lastIndex);\n    // Extract the substring before the last dash (\"-\")\n    return date\n    \n  }\n\n  const formatDateTime = (dateString) => {\n    const date = new Date(dateString);\n\n   const newDate =  new Intl.DateTimeFormat('en-US', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n      weekday: 'short',\n      hour: 'numeric',\n      minute: 'numeric',\n      hour12: true\n    }).format(date);\n\n    return newDate\n  }\n\n  console.log(filteredData)\n  console.log(\"orig\", startTime)\n  console.log(convertTimeTo24HourFormat(endTime))\n  console.log(startTime)\n\n\n  return (\n    <div className=\"App\">\n      <h1>How's the weather? 🌡️</h1>\n      <h3>Enter location coordinates</h3>\n      <form onSubmit={handleSubmit}>\n        <div>\n          <label>\n            Latitude:\n            <input\n              type=\"text\"\n              value={latitude}\n              onChange={(e) => setLatitude(e.target.value)}\n              placeholder=\"e.g., 36.1716\"\n            />\n          </label>\n        </div>\n        <div>\n          <label>\n            Longitude:\n            <input\n              type=\"text\"\n              value={longitude}\n              onChange={(e) => setLongitude(e.target.value)}\n              placeholder=\"e.g., -115.1391\"\n            />\n          </label>\n        </div>\n        <label htmlFor=\"startDate\">Start Date:</label>\n      <select id=\"startDate\" value={startDate} onChange={(e) => setStartDate(e.target.value)}>\n      <option value=\"\" disabled>Select day</option>\n        {nextSevenDays.map((date, index) => (\n          <option key={index} value={date}>{date}</option>\n        ))}\n      </select>\n      <label htmlFor=\"endDate\">End Date:</label>\n      <select id=\"endDate\" value={endDate} onChange={(e) => setEndDate(e.target.value)}>\n      <option value=\"\" disabled>Select day</option>\n        {nextSevenDays.map((date, index) => (\n          <option key={index} value={date}>{date}</option>\n        ))}\n      </select>\n      <label htmlFor=\"startTimeHour\">Start Time:</label>\n      <select id=\"startTimeHour\" value={startTime.hour} onChange={(e) => setStartTime({ ...startTime, hour: e.target.value })}>\n        <option value=\"\" disabled>Select hour</option>\n        {hours.map((hour, index) => (\n          <option key={index} value={hour}>{hour}</option>\n        ))}\n      </select>\n      <select id=\"startTimePeriod\" value={startTime.period} onChange={(e) => setStartTime({ ...startTime, period: e.target.value })}>\n        <option value=\"\" disabled>Select period</option>\n        {periods.map((period, index) => (\n          <option key={index} value={period}>{period}</option>\n        ))}\n      </select>\n\n      <label htmlFor=\"endTimeHour\">End Time:</label>\n      <select id=\"endTimeHour\" value={endTime.hour} onChange={(e) => setEndTime({ ...endTime, hour: e.target.value })}>\n        <option value=\"\" disabled>Select hour</option>\n        {hours.map((hour, index) => (\n          <option key={index} value={hour}>{hour}</option>\n        ))}\n      </select>\n      <select id=\"endTimePeriod\" value={endTime.period} onChange={(e) => setEndTime({ ...endTime, period: e.target.value })}>\n        <option value=\"\" disabled>Select period</option>\n        {periods.map((period, index) => (\n          <option key={index} value={period}>{period}</option>\n        ))}\n      </select>\n        <button type=\"submit\">Submit</button>\n      </form>\n      {error && <p style={{ color: 'red' }}>{error}</p>}\n      {weatherData && (\n        <div>\n          <h2>Weather Data</h2>\n          {filteredData.map((period, index) => (\n            <div key={index} className='weather-container'>\n              <h4>{formatDateTime(deleteTimeZoneFromForecastTime(period.startTime))}</h4>\n               {/* <h4>Start Time: {new Intl.DateTimeFormat('en-US', { timeZone: 'UTC', weekday: 'short', month: 'short', day: 'numeric', year: 'numeric', hour: 'numeric', minute: 'numeric', hour12: true }).format(new Date(period.startTime))} </h4> */}\n              {/* <h4>Start Time:  {new Date(period.startTime).toLocaleString('en-US', { timeZone: 'UTC', weekday: 'short', month: 'short', day: 'numeric', year: 'numeric', hour: 'numeric', minute: 'numeric', hour12: true })}</h4> */}\n              {/* <h4>End Time: {new Date(period.endTime).toLocaleString('en-US', {  weekday: 'short', month: 'short', day: 'numeric', year: 'numeric', hour: 'numeric', minute: 'numeric', hour12: true })}</h4> */}\n              <p>Temperature: {period.temperature} &deg;{period.temperatureUnit}</p>\n              <p>{period.shortForecast}</p>\n              <p>Precipitation: {period.probabilityOfPrecipitation.value}%</p>\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}