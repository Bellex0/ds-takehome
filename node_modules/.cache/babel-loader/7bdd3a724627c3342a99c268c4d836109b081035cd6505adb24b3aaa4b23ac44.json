{"ast":null,"code":"var _jsxFileName = \"/Users/belle/Desktop/data-society/data-society-take-home/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [latitude, setLatitude] = useState('');\n  const [longitude, setLongitude] = useState('');\n  const [startDate, setStartDate] = useState('');\n  const [endDate, setEndDate] = useState('');\n  const [startTime, setStartTime] = useState({\n    hour: '',\n    period: ''\n  });\n  const [endTime, setEndTime] = useState({\n    hour: '',\n    period: ''\n  });\n  const [weatherData, setWeatherData] = useState(null);\n  const [filteredData, setFilteredData] = useState(null);\n  const [error, setError] = useState('');\n\n  // format date to YYYY-MM-DD\n  // const formatDate = (dateStr) => {\n  //   const date = new Date(dateStr);\n  //   return date.toISOString().split('T')[0];\n  // };\n\n  const formatDate = dateStr => {\n    const date = new Date(dateStr);\n    const options = {\n      year: 'numeric',\n      month: '2-digit',\n      day: '2-digit'\n    };\n    return date.toLocaleDateString('en-CA', options).replace(/\\//g, '-');\n  };\n\n  // convert time to 00:00:00\n  const convertTimeTo24HourFormat = timeObj => {\n    let {\n      hour,\n      period\n    } = timeObj;\n    hour = parseInt(hour);\n    if (period === 'PM' && hour !== 12) {\n      hour += 12;\n    } else if (period === 'AM' && hour === 12) {\n      hour = 0;\n    }\n\n    // return `${hour.toString().padStart(2, '0')}:00:00-05:00`;\n    return `${hour.toString().padStart(2, '0')}:00:00`;\n  };\n  const calculateTimeZoneOffset = () => {\n    const offset = new Date().getTimezoneOffset();\n    const absOffset = Math.abs(offset);\n    const hours = String(Math.floor(absOffset / 60)).padStart(2, '0');\n    const minutes = String(absOffset % 60).padStart(2, '0');\n    const sign = offset <= 0 ? '+' : '-';\n    return `${sign}${hours}:${minutes}`;\n  };\n\n  // Function to generate dates for the next seven days\n  const daysOfWeek = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n  const nextSevenDays = Array.from({\n    length: 7\n  }, (_, index) => {\n    const today = new Date();\n    const date = new Date(today);\n    date.setDate(date.getDate() + index);\n    const dayOfWeek = daysOfWeek[date.getDay()];\n    const month = date.toLocaleString('en-US', {\n      month: 'short'\n    });\n    const day = date.getDate();\n    const year = date.getFullYear();\n    return `${dayOfWeek} ${month} ${day}, ${year}`;\n  });\n\n  // Arrays for hours and AM/PM\n  const hours = Array.from({\n    length: 12\n  }, (_, i) => i + 1);\n  const periods = ['AM', 'PM'];\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const lat = parseFloat(latitude);\n    const long = parseFloat(longitude);\n    if (!latitude || !longitude) {\n      setError('Please enter latitude and longitude');\n      return;\n    }\n    setError('');\n    const url = `https://api.weather.gov/points/${lat},${long}`;\n    try {\n      // 1ST API CALL TO GET HOURLY FORECAST ENDPOINT\n      const response = await fetch(url);\n      console.log(\"response\", response);\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(`Error ${errorData.status}: ${errorData.detail}` || `Error: ${response.status}`);\n      }\n      const data = await response.json();\n      const forecastHourlyURL = data.properties.forecastHourly;\n\n      // 2ND API CALL TO GET HOURLY FORECAST\n      const forecastResponse = await fetch(forecastHourlyURL);\n      console.log(\"forecast\", forecastResponse);\n      if (!forecastResponse.ok) {\n        const errorData = await forecastResponse.json();\n        throw new Error(`Error ${errorData.status}: ${errorData.detail}` || `Error: ${forecastResponse.status}`);\n      }\n      const forecastData = await forecastResponse.json();\n      setWeatherData(forecastData);\n\n      // convert user input dates and times to match API data's startTime, endTime values\n      //  const startDateTime = `${formatDate(startDate)}T${convertTimeTo24HourFormat(startTime)}`;\n      //  const endDateTime = `${formatDate(endDate)}T${convertTimeTo24HourFormat(endTime)}`;\n      // const startDateTime = new Date(`${formatDate(startDate)}T${convertTimeTo24HourFormat(startTime)}Z`);\n      // const endDateTime = new Date(`${formatDate(endDate)}T${convertTimeTo24HourFormat(endTime)}Z`);\n      const startDateTime = new Date(`${formatDate(startDate)}T${convertTimeTo24HourFormat(startTime)}Z`).toISOString();\n      const endDateTime = new Date(`${formatDate(endDate)}T${convertTimeTo24HourFormat(endTime)}Z`).toISOString();\n      console.log(\"datetime\", endDateTime);\n      console.log;\n\n      // filter data based on start date/time and end date/time\n      //  const filteredPeriods = forecastData.properties.periods.filter(period => {\n      //     const periodStartTime = period.startTime;\n      //     // console.log(new Date(period.startTime).getTime())\n      //     // const periodStartTime = new Date(period.startTime).getTime();\n      //     // const periodEndTime = new Date(period.endTime).getTime();\n      //     // return (periodStartTime >= startDateTime.getTime() && periodEndTime <= endDateTime.getTime());\n\n      //     return (periodStartTime >= startDateTime && periodStartTime < endDateTime);\n      //  });\n\n      const filteredPeriods = forecastData.properties.periods.filter(period => {\n        const periodStartTime = new Date(period.startTime).toISOString();\n        const periodEndTime = new Date(period.endTime).toISOString();\n        return periodStartTime >= startDateTime && periodEndTime <= endDateTime;\n      });\n      setFilteredData(filteredPeriods);\n    } catch (error) {\n      console.log(error);\n      setError(error.message);\n      setWeatherData(null);\n    }\n  };\n  console.log(filteredData);\n  console.log(\"orig\", startTime);\n  console.log(convertTimeTo24HourFormat(endTime));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"How's the weather? \\uD83C\\uDF21\\uFE0F\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Enter location coordinates\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Latitude:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: latitude,\n            onChange: e => setLatitude(e.target.value),\n            placeholder: \"e.g., 36.1716\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Longitude:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: longitude,\n            onChange: e => setLongitude(e.target.value),\n            placeholder: \"e.g., -115.1391\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"startDate\",\n        children: \"Start Date:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"startDate\",\n        value: startDate,\n        onChange: e => setStartDate(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          disabled: true,\n          children: \"Select day\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 7\n        }, this), nextSevenDays.map((date, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: date,\n          children: date\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 11\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"endDate\",\n        children: \"End Date:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"endDate\",\n        value: endDate,\n        onChange: e => setEndDate(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          disabled: true,\n          children: \"Select day\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 7\n        }, this), nextSevenDays.map((date, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: date,\n          children: date\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 11\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"startTimeHour\",\n        children: \"Start Time:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"startTimeHour\",\n        value: startTime.hour,\n        onChange: e => setStartTime({\n          ...startTime,\n          hour: e.target.value\n        }),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          disabled: true,\n          children: \"Select hour\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 9\n        }, this), hours.map((hour, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: hour,\n          children: hour\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 11\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"startTimePeriod\",\n        value: startTime.period,\n        onChange: e => setStartTime({\n          ...startTime,\n          period: e.target.value\n        }),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          disabled: true,\n          children: \"Select period\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 9\n        }, this), periods.map((period, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: period,\n          children: period\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 11\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"endTimeHour\",\n        children: \"End Time:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"endTimeHour\",\n        value: endTime.hour,\n        onChange: e => setEndTime({\n          ...endTime,\n          hour: e.target.value\n        }),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          disabled: true,\n          children: \"Select hour\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 9\n        }, this), hours.map((hour, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: hour,\n          children: hour\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 11\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"endTimePeriod\",\n        value: endTime.period,\n        onChange: e => setEndTime({\n          ...endTime,\n          period: e.target.value\n        }),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          disabled: true,\n          children: \"Select period\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 9\n        }, this), periods.map((period, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: period,\n          children: period\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 11\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 17\n    }, this), weatherData && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Weather Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 11\n      }, this), filteredData.map((period, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"weather-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: [\"Start Time:  \", new Date(period.startTime).toLocaleString('en-US', {\n            timeZone: 'UTC',\n            weekday: 'short',\n            month: 'short',\n            day: 'numeric',\n            year: 'numeric',\n            hour: 'numeric',\n            minute: 'numeric',\n            hour12: true\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: [\"End Time: \", new Date(period.endTime).toLocaleString('en-US', {\n            timeZone: 'UTC',\n            weekday: 'short',\n            month: 'short',\n            day: 'numeric',\n            year: 'numeric',\n            hour: 'numeric',\n            minute: 'numeric',\n            hour12: true\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Temperature: \", period.temperature, \" \\xB0\", period.temperatureUnit]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: period.shortForecast\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Precipitation: \", period.probabilityOfPrecipitation.value, \"%\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 15\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 13\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 150,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"o8fd18GkNoMsf9VLf0jhLb8bXqc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","App","_s","latitude","setLatitude","longitude","setLongitude","startDate","setStartDate","endDate","setEndDate","startTime","setStartTime","hour","period","endTime","setEndTime","weatherData","setWeatherData","filteredData","setFilteredData","error","setError","formatDate","dateStr","date","Date","options","year","month","day","toLocaleDateString","replace","convertTimeTo24HourFormat","timeObj","parseInt","toString","padStart","calculateTimeZoneOffset","offset","getTimezoneOffset","absOffset","Math","abs","hours","String","floor","minutes","sign","daysOfWeek","nextSevenDays","Array","from","length","_","index","today","setDate","getDate","dayOfWeek","getDay","toLocaleString","getFullYear","i","periods","handleSubmit","e","preventDefault","lat","parseFloat","long","url","response","fetch","console","log","ok","errorData","json","Error","status","detail","data","forecastHourlyURL","properties","forecastHourly","forecastResponse","forecastData","startDateTime","toISOString","endDateTime","filteredPeriods","filter","periodStartTime","periodEndTime","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","value","onChange","target","placeholder","htmlFor","id","disabled","map","style","color","timeZone","weekday","minute","hour12","temperature","temperatureUnit","shortForecast","probabilityOfPrecipitation","_c","$RefreshReg$"],"sources":["/Users/belle/Desktop/data-society/data-society-take-home/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [latitude, setLatitude] = useState('');\n  const [longitude, setLongitude] = useState('');\n  const [startDate, setStartDate] = useState('');\n  const [endDate, setEndDate] = useState('');\n  const [startTime, setStartTime] = useState({ hour: '', period: '' });\n  const [endTime, setEndTime] = useState({ hour: '', period: '' });\n  const [weatherData, setWeatherData] = useState(null);\n  const [filteredData, setFilteredData] = useState(null);\n  const [error, setError] = useState('');\n\n  // format date to YYYY-MM-DD\n  // const formatDate = (dateStr) => {\n  //   const date = new Date(dateStr);\n  //   return date.toISOString().split('T')[0];\n  // };\n\n  const formatDate = (dateStr) => {\n    const date = new Date(dateStr);\n    const options = { year: 'numeric', month: '2-digit', day: '2-digit' };\n    return date.toLocaleDateString('en-CA', options).replace(/\\//g, '-');\n  };\n\n  // convert time to 00:00:00\n  const convertTimeTo24HourFormat = (timeObj) => {\n    let { hour, period } = timeObj;\n    hour = parseInt(hour);\n  \n    if (period === 'PM' && hour !== 12) {\n      hour += 12;\n    } else if (period === 'AM' && hour === 12) {\n      hour = 0;\n    }\n  \n    // return `${hour.toString().padStart(2, '0')}:00:00-05:00`;\n    return `${hour.toString().padStart(2, '0')}:00:00`;\n  };\n\n  const calculateTimeZoneOffset = () => {\n    const offset = new Date().getTimezoneOffset();\n    const absOffset = Math.abs(offset);\n    const hours = String(Math.floor(absOffset / 60)).padStart(2, '0');\n    const minutes = String(absOffset % 60).padStart(2, '0');\n    const sign = offset <= 0 ? '+' : '-';\n    return `${sign}${hours}:${minutes}`;\n  };\n  \n\n   // Function to generate dates for the next seven days\n   const daysOfWeek = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n   const nextSevenDays = Array.from({ length: 7 }, (_, index) => {\n    const today = new Date();\n     const date = new Date(today);\n     date.setDate(date.getDate() + index);\n     const dayOfWeek = daysOfWeek[date.getDay()];\n     const month = date.toLocaleString('en-US', { month: 'short' });\n     const day = date.getDate();\n     const year = date.getFullYear();\n     return `${dayOfWeek} ${month} ${day}, ${year}`;\n   });\n\n     // Arrays for hours and AM/PM\n    const hours = Array.from({ length: 12 }, (_, i) => i + 1);\n    const periods = ['AM', 'PM'];\n\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    const lat = parseFloat(latitude);\n    const long = parseFloat(longitude);\n\n    if (!latitude || !longitude) {\n      setError('Please enter latitude and longitude');\n      return;\n    }\n\n    setError('');\n\n    const url = `https://api.weather.gov/points/${lat},${long}`;\n\n    try {\n      // 1ST API CALL TO GET HOURLY FORECAST ENDPOINT\n      const response = await fetch(url);\n      console.log(\"response\", response)\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(`Error ${errorData.status}: ${errorData.detail}` || `Error: ${response.status}`);\n      }\n      const data = await response.json();\n      const forecastHourlyURL = data.properties.forecastHourly;\n\n      // 2ND API CALL TO GET HOURLY FORECAST\n      const forecastResponse = await fetch(forecastHourlyURL)\n      console.log(\"forecast\", forecastResponse)\n      if (!forecastResponse.ok) {\n        const errorData = await forecastResponse.json();\n        throw new Error(`Error ${errorData.status}: ${errorData.detail}` || `Error: ${forecastResponse.status}`);\n      }\n\n      const forecastData = await forecastResponse.json();\n      setWeatherData(forecastData);\n\n     // convert user input dates and times to match API data's startTime, endTime values\n    //  const startDateTime = `${formatDate(startDate)}T${convertTimeTo24HourFormat(startTime)}`;\n    //  const endDateTime = `${formatDate(endDate)}T${convertTimeTo24HourFormat(endTime)}`;\n    // const startDateTime = new Date(`${formatDate(startDate)}T${convertTimeTo24HourFormat(startTime)}Z`);\n    // const endDateTime = new Date(`${formatDate(endDate)}T${convertTimeTo24HourFormat(endTime)}Z`);\n    const startDateTime = new Date(`${formatDate(startDate)}T${convertTimeTo24HourFormat(startTime)}Z`).toISOString();\n    const endDateTime = new Date(`${formatDate(endDate)}T${convertTimeTo24HourFormat(endTime)}Z`).toISOString();\n\n     console.log(\"datetime\", endDateTime)\n     console.log\n\n     // filter data based on start date/time and end date/time\n    //  const filteredPeriods = forecastData.properties.periods.filter(period => {\n    //     const periodStartTime = period.startTime;\n    //     // console.log(new Date(period.startTime).getTime())\n    //     // const periodStartTime = new Date(period.startTime).getTime();\n    //     // const periodEndTime = new Date(period.endTime).getTime();\n    //     // return (periodStartTime >= startDateTime.getTime() && periodEndTime <= endDateTime.getTime());\n\n    //     return (periodStartTime >= startDateTime && periodStartTime < endDateTime);\n    //  });\n\n     const filteredPeriods = forecastData.properties.periods.filter(period => {\n      const periodStartTime = new Date(period.startTime).toISOString();\n      const periodEndTime = new Date(period.endTime).toISOString();\n      return (periodStartTime >= startDateTime && periodEndTime <= endDateTime);\n    });\n      \n     setFilteredData(filteredPeriods);\n      \n    } catch (error) {\n      console.log(error)\n      setError(error.message);\n      setWeatherData(null);\n    }\n  };\n\n  console.log(filteredData)\n  console.log(\"orig\", startTime)\n  console.log(convertTimeTo24HourFormat(endTime))\n\n\n  return (\n    <div className=\"App\">\n      <h1>How's the weather? 🌡️</h1>\n      <h3>Enter location coordinates</h3>\n      <form onSubmit={handleSubmit}>\n        <div>\n          <label>\n            Latitude:\n            <input\n              type=\"text\"\n              value={latitude}\n              onChange={(e) => setLatitude(e.target.value)}\n              placeholder=\"e.g., 36.1716\"\n            />\n          </label>\n        </div>\n        <div>\n          <label>\n            Longitude:\n            <input\n              type=\"text\"\n              value={longitude}\n              onChange={(e) => setLongitude(e.target.value)}\n              placeholder=\"e.g., -115.1391\"\n            />\n          </label>\n        </div>\n        <label htmlFor=\"startDate\">Start Date:</label>\n      <select id=\"startDate\" value={startDate} onChange={(e) => setStartDate(e.target.value)}>\n      <option value=\"\" disabled>Select day</option>\n        {nextSevenDays.map((date, index) => (\n          <option key={index} value={date}>{date}</option>\n        ))}\n      </select>\n      <label htmlFor=\"endDate\">End Date:</label>\n      <select id=\"endDate\" value={endDate} onChange={(e) => setEndDate(e.target.value)}>\n      <option value=\"\" disabled>Select day</option>\n        {nextSevenDays.map((date, index) => (\n          <option key={index} value={date}>{date}</option>\n        ))}\n      </select>\n      <label htmlFor=\"startTimeHour\">Start Time:</label>\n      <select id=\"startTimeHour\" value={startTime.hour} onChange={(e) => setStartTime({ ...startTime, hour: e.target.value })}>\n        <option value=\"\" disabled>Select hour</option>\n        {hours.map((hour, index) => (\n          <option key={index} value={hour}>{hour}</option>\n        ))}\n      </select>\n      <select id=\"startTimePeriod\" value={startTime.period} onChange={(e) => setStartTime({ ...startTime, period: e.target.value })}>\n        <option value=\"\" disabled>Select period</option>\n        {periods.map((period, index) => (\n          <option key={index} value={period}>{period}</option>\n        ))}\n      </select>\n\n      <label htmlFor=\"endTimeHour\">End Time:</label>\n      <select id=\"endTimeHour\" value={endTime.hour} onChange={(e) => setEndTime({ ...endTime, hour: e.target.value })}>\n        <option value=\"\" disabled>Select hour</option>\n        {hours.map((hour, index) => (\n          <option key={index} value={hour}>{hour}</option>\n        ))}\n      </select>\n      <select id=\"endTimePeriod\" value={endTime.period} onChange={(e) => setEndTime({ ...endTime, period: e.target.value })}>\n        <option value=\"\" disabled>Select period</option>\n        {periods.map((period, index) => (\n          <option key={index} value={period}>{period}</option>\n        ))}\n      </select>\n        <button type=\"submit\">Submit</button>\n      </form>\n      {error && <p style={{ color: 'red' }}>{error}</p>}\n      {weatherData && (\n        <div>\n          <h2>Weather Data</h2>\n          {filteredData.map((period, index) => (\n            <div key={index} className='weather-container'>\n              <h4>Start Time:  {new Date(period.startTime).toLocaleString('en-US', { timeZone: 'UTC', weekday: 'short', month: 'short', day: 'numeric', year: 'numeric', hour: 'numeric', minute: 'numeric', hour12: true })}</h4>\n              <h4>End Time: {new Date(period.endTime).toLocaleString('en-US', { timeZone: 'UTC', weekday: 'short', month: 'short', day: 'numeric', year: 'numeric', hour: 'numeric', minute: 'numeric', hour12: true })}</h4>\n              <p>Temperature: {period.temperature} &deg;{period.temperatureUnit}</p>\n              <p>{period.shortForecast}</p>\n              <p>Precipitation: {period.probabilityOfPrecipitation.value}%</p>\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}