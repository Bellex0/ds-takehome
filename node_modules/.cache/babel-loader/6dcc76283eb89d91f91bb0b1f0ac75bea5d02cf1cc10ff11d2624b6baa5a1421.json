{"ast":null,"code":"var _jsxFileName = \"/Users/belle/Desktop/data-society/data-society-take-home/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './App.css';\nimport Form from './Form';\nimport WeatherForecast from './WeatherForecast';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [latitude, setLatitude] = useState('');\n  const [longitude, setLongitude] = useState('');\n  const [startDate, setStartDate] = useState('');\n  const [endDate, setEndDate] = useState('');\n  const [startTime, setStartTime] = useState({\n    hour: '',\n    period: ''\n  });\n  const [endTime, setEndTime] = useState({\n    hour: '',\n    period: ''\n  });\n  const [filteredWeatherData, setFilteredWeatherData] = useState(null);\n  const [error, setError] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n\n  // format date to YYYY-MM-DD\n  const formatDate = dateStr => {\n    const date = new Date(dateStr);\n    return date.toISOString().split('T')[0];\n  };\n\n  // convert time to 00:00:00\n  const convertTimeTo24HourFormat = timeObj => {\n    let {\n      hour,\n      period\n    } = timeObj;\n    hour = parseInt(hour);\n    if (period === 'PM' && hour !== 12) {\n      hour += 12;\n    } else if (period === 'AM' && hour === 12) {\n      hour = 0;\n    }\n\n    // return `${hour.toString().padStart(2, '0')}:00:00-05:00`;\n    return `${hour.toString().padStart(2, '0')}:00:00`;\n  };\n\n  // Function to generate dates for the next seven days\n  const daysOfWeek = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n  const nextSevenDays = Array.from({\n    length: 7\n  }, (_, index) => {\n    const today = new Date();\n    const date = new Date(today);\n    date.setDate(date.getDate() + index);\n    const dayOfWeek = daysOfWeek[date.getDay()];\n    const month = date.toLocaleString('en-US', {\n      month: 'short'\n    });\n    const day = date.getDate();\n    const year = date.getFullYear();\n    return `${dayOfWeek} ${month} ${day}, ${year}`;\n  });\n\n  // Arrays for hours and AM/PM\n  const hours = Array.from({\n    length: 12\n  }, (_, i) => i + 1);\n  const periods = ['AM', 'PM'];\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const lat = parseFloat(latitude);\n    const long = parseFloat(longitude);\n    if (!latitude || !longitude) {\n      setError('Please enter latitude and longitude');\n      setIsLoading(false);\n      return;\n    }\n    if (!startDate || !endDate || !startTime.hour || !startTime.period || !endTime.hour || !endTime.period) {\n      setError('Please select date and/or time');\n      setIsLoading(false);\n      return;\n    }\n    setError('');\n    setIsLoading(true);\n    const url = `https://api.weather.gov/points/${lat},${long}`;\n    try {\n      // 1ST API CALL TO GET HOURLY FORECAST ENDPOINT\n      const response = await fetch(url);\n      console.log(\"response\", response);\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(`Error ${errorData.status}: ${errorData.detail}` || `Error: ${response.status}`);\n      }\n      const data = await response.json();\n      const forecastHourlyURL = data.properties.forecastHourly;\n\n      // 2ND API CALL TO GET HOURLY FORECAST\n      const forecastResponse = await fetch(forecastHourlyURL);\n      console.log(\"forecast\", forecastResponse);\n      if (!forecastResponse.ok) {\n        const errorData = await forecastResponse.json();\n        throw new Error(`Error ${errorData.status}: ${errorData.detail}` || `Error: ${forecastResponse.status}`);\n      }\n      const forecastData = await forecastResponse.json();\n      // setWeatherData(forecastData);\n\n      // convert user input dates and times to match API data's startTime, endTime values\n      const startDateTime = `${formatDate(startDate)}T${convertTimeTo24HourFormat(startTime)}`;\n      const endDateTime = `${formatDate(endDate)}T${convertTimeTo24HourFormat(endTime)}`;\n      console.log(\"datetime\", endDateTime);\n      console.log(\"format\", formatDate(startDate));\n\n      // filter data based on start date/time and end date/time\n      const filteredPeriods = forecastData.properties.periods.filter(period => {\n        const periodStartTime = deleteTimeZoneFromForecastTime(period.startTime);\n        return periodStartTime >= startDateTime && periodStartTime <= endDateTime;\n      });\n      console.log(\"filters\", filteredPeriods);\n      setFilteredWeatherData(filteredPeriods);\n      setIsLoading(false);\n    } catch (error) {\n      console.log(error);\n      setError(error.message);\n      setFilteredWeatherData(null);\n      setIsLoading(false);\n    }\n  };\n  const deleteTimeZoneFromForecastTime = dateTime => {\n    const lastIndex = dateTime.lastIndexOf('-');\n    const date = dateTime.substring(0, lastIndex);\n    // Extract the substring before the last dash (\"-\")\n    return date;\n  };\n  const formatDateTime = dateString => {\n    const date = new Date(dateString);\n    const newDate = new Intl.DateTimeFormat('en-US', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n      weekday: 'short',\n      hour: 'numeric',\n      minute: 'numeric',\n      hour12: true\n    }).format(date);\n    return newDate;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"How's the weather? \\uD83C\\uDF21\\uFE0F\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      latitude: latitude,\n      setLatitude: setLatitude,\n      longitude: longitude,\n      setLongitude: setLongitude,\n      startDate: startDate,\n      setStartDate: setStartDate,\n      endDate: endDate,\n      setEndDate: setEndDate,\n      startTime: startTime,\n      setStartTime: setStartTime,\n      endTime: endTime,\n      setEndTime: setEndTime,\n      nextSevenDays: nextSevenDays,\n      hours: hours,\n      periods: periods,\n      handleSubmit: handleSubmit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 17\n    }, this), isLoading ? /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"loading-sun\",\n        children: \"\\u2600\\uFE0F\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 25\n      }, this), \" Loading...\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 21\n    }, this) : /*#__PURE__*/_jsxDEV(WeatherForecast, {\n      filteredWeatherData: filteredWeatherData,\n      formatTimeZone: deleteTimeZoneFromForecastTime,\n      formatDateTime: formatDateTime\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 153,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"DCt37nQjb+DlY6HbExV2a4XxJ2M=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Form","WeatherForecast","jsxDEV","_jsxDEV","App","_s","latitude","setLatitude","longitude","setLongitude","startDate","setStartDate","endDate","setEndDate","startTime","setStartTime","hour","period","endTime","setEndTime","filteredWeatherData","setFilteredWeatherData","error","setError","isLoading","setIsLoading","formatDate","dateStr","date","Date","toISOString","split","convertTimeTo24HourFormat","timeObj","parseInt","toString","padStart","daysOfWeek","nextSevenDays","Array","from","length","_","index","today","setDate","getDate","dayOfWeek","getDay","month","toLocaleString","day","year","getFullYear","hours","i","periods","handleSubmit","e","preventDefault","lat","parseFloat","long","url","response","fetch","console","log","ok","errorData","json","Error","status","detail","data","forecastHourlyURL","properties","forecastHourly","forecastResponse","forecastData","startDateTime","endDateTime","filteredPeriods","filter","periodStartTime","deleteTimeZoneFromForecastTime","message","dateTime","lastIndex","lastIndexOf","substring","formatDateTime","dateString","newDate","Intl","DateTimeFormat","weekday","minute","hour12","format","className","children","fileName","_jsxFileName","lineNumber","columnNumber","formatTimeZone","_c","$RefreshReg$"],"sources":["/Users/belle/Desktop/data-society/data-society-take-home/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nimport Form from './Form';\nimport WeatherForecast from './WeatherForecast';\n\nfunction App() {\n  const [latitude, setLatitude] = useState('');\n  const [longitude, setLongitude] = useState('');\n  const [startDate, setStartDate] = useState('');\n  const [endDate, setEndDate] = useState('');\n  const [startTime, setStartTime] = useState({ hour: '', period: '' });\n  const [endTime, setEndTime] = useState({ hour: '', period: '' });\n  const [filteredWeatherData, setFilteredWeatherData] = useState(null);\n  const [error, setError] = useState('');\n  const [isLoading, setIsLoading] = useState(false)\n\n  // format date to YYYY-MM-DD\n  const formatDate = (dateStr) => {\n    const date = new Date(dateStr);\n    return date.toISOString().split('T')[0];\n  };\n\n  // convert time to 00:00:00\n  const convertTimeTo24HourFormat = (timeObj) => {\n    let { hour, period } = timeObj;\n    hour = parseInt(hour);\n  \n    if (period === 'PM' && hour !== 12) {\n      hour += 12;\n    } else if (period === 'AM' && hour === 12) {\n      hour = 0;\n    }\n  \n    // return `${hour.toString().padStart(2, '0')}:00:00-05:00`;\n    return `${hour.toString().padStart(2, '0')}:00:00`;\n  };\n\n   // Function to generate dates for the next seven days\n   const daysOfWeek = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n   const nextSevenDays = Array.from({ length: 7 }, (_, index) => {\n    const today = new Date();\n     const date = new Date(today);\n     date.setDate(date.getDate() + index);\n     const dayOfWeek = daysOfWeek[date.getDay()];\n     const month = date.toLocaleString('en-US', { month: 'short' });\n     const day = date.getDate();\n     const year = date.getFullYear();\n     return `${dayOfWeek} ${month} ${day}, ${year}`;\n   });\n\n     // Arrays for hours and AM/PM\n    const hours = Array.from({ length: 12 }, (_, i) => i + 1);\n    const periods = ['AM', 'PM'];\n\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    const lat = parseFloat(latitude);\n    const long = parseFloat(longitude);\n\n    if (!latitude || !longitude) {\n      setError('Please enter latitude and longitude');\n      setIsLoading(false); \n      return;\n    }\n\n    if (!startDate || !endDate || !startTime.hour || !startTime.period || !endTime.hour || !endTime.period) {\n      setError('Please select date and/or time');\n      setIsLoading(false);\n      return;\n    }\n\n    setError('');\n    setIsLoading(true);\n\n    const url = `https://api.weather.gov/points/${lat},${long}`;\n\n    try {\n      // 1ST API CALL TO GET HOURLY FORECAST ENDPOINT\n      const response = await fetch(url);\n      console.log(\"response\", response)\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(`Error ${errorData.status}: ${errorData.detail}` || `Error: ${response.status}`);\n      }\n      const data = await response.json();\n      const forecastHourlyURL = data.properties.forecastHourly;\n\n      // 2ND API CALL TO GET HOURLY FORECAST\n      const forecastResponse = await fetch(forecastHourlyURL)\n      console.log(\"forecast\", forecastResponse)\n      if (!forecastResponse.ok) {\n        const errorData = await forecastResponse.json();\n        throw new Error(`Error ${errorData.status}: ${errorData.detail}` || `Error: ${forecastResponse.status}`);\n      }\n\n      const forecastData = await forecastResponse.json();\n      // setWeatherData(forecastData);\n\n     // convert user input dates and times to match API data's startTime, endTime values\n     const startDateTime = `${formatDate(startDate)}T${convertTimeTo24HourFormat(startTime)}`;\n     const endDateTime = `${formatDate(endDate)}T${convertTimeTo24HourFormat(endTime)}`;\n\n     console.log(\"datetime\", endDateTime)\n     console.log(\"format\", formatDate(startDate))\n\n     // filter data based on start date/time and end date/time\n     const filteredPeriods = forecastData.properties.periods.filter(period => {\n        const periodStartTime = deleteTimeZoneFromForecastTime(period.startTime);\n        return (periodStartTime >= startDateTime && periodStartTime <= endDateTime);\n     });\n\n    console.log(\"filters\", filteredPeriods)\n      \n     setFilteredWeatherData(filteredPeriods);\n     setIsLoading(false);\n      \n    } catch (error) {\n      console.log(error)\n      setError(error.message);\n      setFilteredWeatherData(null);\n      setIsLoading(false);\n    }\n  };\n\n  const deleteTimeZoneFromForecastTime = (dateTime) => {\n    const lastIndex = dateTime.lastIndexOf('-');\n\n    const date = dateTime.substring(0, lastIndex);\n    // Extract the substring before the last dash (\"-\")\n    return date\n    \n  }\n\n  const formatDateTime = (dateString) => {\n    const date = new Date(dateString);\n\n   const newDate =  new Intl.DateTimeFormat('en-US', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n      weekday: 'short',\n      hour: 'numeric',\n      minute: 'numeric',\n      hour12: true\n    }).format(date);\n\n    return newDate\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>How's the weather? 🌡️</h1>\n      <Form  \n        latitude={latitude}\n        setLatitude={setLatitude}\n        longitude={longitude}\n        setLongitude={setLongitude}\n        startDate={startDate}\n        setStartDate={setStartDate}\n        endDate={endDate}\n        setEndDate={setEndDate}\n        startTime={startTime}\n        setStartTime={setStartTime}\n        endTime={endTime}\n        setEndTime={setEndTime}\n        nextSevenDays={nextSevenDays}\n        hours={hours}\n        periods={periods}\n        handleSubmit={handleSubmit}/>\n      {/* <h3>Enter location coordinates</h3>\n      <form onSubmit={handleSubmit}>\n        <div className='coordinates-container'>\n          <div className='latitude'>\n            <label htmlFor=\"latitude\">\n              Latitude:\n              <input\n                type=\"text\"\n                id=\"latitude\"\n                value={latitude}\n                onChange={(e) => setLatitude(e.target.value)}\n                placeholder=\"e.g., 36.1716\"\n              />\n            </label>\n          </div>\n          <div className='longitude'>\n            <label htmlFor=\"longitude\">\n              Longitude:\n              <input\n                type=\"text\"\n                id=\"longitude\"\n                value={longitude}\n                onChange={(e) => setLongitude(e.target.value)}\n                placeholder=\"e.g., -115.1391\"\n              />\n            </label>\n          </div>\n        </div>\n        <h3>Enter time frame</h3>\n        <div className='start-container'>\n          <label htmlFor=\"start-date\">Start Date:</label>\n          <select id=\"start-date\" value={startDate} onChange={(e) => setStartDate(e.target.value)}>\n          <option value=\"\" disabled>Select day</option>\n            {nextSevenDays.map((date, index) => (\n              <option key={index} value={date}>{date}</option>\n            ))}\n          </select>\n        <label htmlFor=\"start-time-hour\">Start Time:</label>\n        <select id=\"start-time-hour\" value={startTime.hour} onChange={(e) => setStartTime({ ...startTime, hour: e.target.value })}>\n          <option value=\"\" disabled>Select hour</option>\n          {hours.map((hour, index) => (\n            <option key={index} value={hour}>{hour}</option>\n          ))}\n        </select>\n        <select id=\"start-time-period\" value={startTime.period} onChange={(e) => setStartTime({ ...startTime, period: e.target.value })}>\n          <option value=\"\" disabled>Select AM/PM</option>\n          {periods.map((period, index) => (\n            <option key={index} value={period}>{period}</option>\n          ))}\n        </select>\n      </div>\n      <div className='end-container'>\n      <label htmlFor=\"end-date\">End Date:</label>\n      <select id=\"end-date\" value={endDate} onChange={(e) => setEndDate(e.target.value)}>\n      <option value=\"\" disabled>Select day</option>\n        {nextSevenDays.map((date, index) => (\n          <option key={index} value={date}>{date}</option>\n        ))}\n      </select>\n      <label htmlFor=\"end-time-hour\">End Time:</label>\n      <select id=\"end-time-hour\" value={endTime.hour} onChange={(e) => setEndTime({ ...endTime, hour: e.target.value })}>\n        <option value=\"\" disabled>Select hour</option>\n        {hours.map((hour, index) => (\n          <option key={index} value={hour}>{hour}</option>\n        ))}\n      </select>\n      <select id=\"end-time-period\" value={endTime.period} onChange={(e) => setEndTime({ ...endTime, period: e.target.value })}>\n        <option value=\"\" disabled>Select AM/PM</option>\n        {periods.map((period, index) => (\n          <option key={index} value={period}>{period}</option>\n        ))}\n      </select>\n      </div>\n        <button type=\"submit\" className='submit-button'>Submit</button>\n      </form> */}\n\n      {error && <p className='error'>{error}</p>}\n      {isLoading ?  <h4><span className='loading-sun'>☀️</span> Loading...</h4> : \n      <WeatherForecast filteredWeatherData={filteredWeatherData} formatTimeZone={deleteTimeZoneFromForecastTime} formatDateTime={formatDateTime} />\n      }\n\n      {/* {isLoading ? (\n      <h4><span className='loading-sun'>☀️</span> Loading...</h4>\n       ) : (\n          <div>\n          {filteredWeatherData ? (\n          filteredWeatherData.length > 0 ? (\n            <h2>🌤️ Weather Forecast</h2>\n          ) : (\n            <p className='error'>Please check your inputs and try submitting again.</p>\n          )\n        ) : null}\n          <div className='main-container'>\n          {filteredWeatherData?.map((period, index) => (\n            <div key={index} className='weather-container'>\n              <h3>{formatDateTime(deleteTimeZoneFromForecastTime(period.startTime))}</h3>\n              <p><b>{period.temperature} &deg;{period.temperatureUnit}</b></p>\n              <p>{period.shortForecast}</p>\n              <p>Precipitation: {period.probabilityOfPrecipitation.value}%</p>\n            </div>\n          ))}\n          </div>\n        </div>\n      )} */}\n    </div>\n  );\n}\n\nexport default App;\n\n "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}